# Scratch pad for laying out chemical inventory data


# Internal lot number is the primary key ('_id')
# Format: For the first chemical checked in on August 9, 2024: 20240809.0001, second chemical is 20240809.0002, etc.
# I need to figure out an easy way to pull the suffix of the last chemical created of that day and then add one to it since multiple additions are made over the course of a day.

Name: type=str
CAS Number: type=str

Amount: type=float
Units: type=str
  # Front-end will eventually force entry from a list
  µg, mg, g, kg, µL, mL, L
Container Type: type=str
  # Front-end will eventually force entry from a list
  Bottle, Ampoule, Sample vial, Conical tube, Bag, Cryovial
Storage Condition: type=str
  # It must either be 'Ambient' OR an integer. If it's an integer, then when served as a query result then ' °C' will be appended.
  # Front end entry will eventually be: Storage Condition: [entry box] °C Ambient x where 'x' is a checkbox.
  # Note that the entry page would be different than the display page.
    # Gonna need to learn how to build a front end, though lmao

Source:
  Purchased, Prepared

# Note that _id is required. I want to set the format.
# On loading the front end, _id should display as 'Internal Lot Number'.
If 'Purchased':
  Manufacturer: 
  Lot/Batch Number: 
  _id (Internal Lot Number):
If 'Prepared':
  _id (Internal Lot Number): 
  Components:
    Component 1:
      Name: 
      Amount: 
      Units: 
      Internal Lot Number:
    Component 2:
      Name: 
      Amount: 
      Units: 
      Internal Lot Number:


# Times should be in the default Python format generated by datetime.now()
#*e.g.* 2024-08-25 14:02:29.750079 ...I'm guessing a real front-end makes a timestamp when the "save" button is clicked or whatever.
# Opened Date can be blank, but the others require entry.
Received Date: 
Opened Date: 
Expiry Date: 

Validation:
  First, I need to check for these: ['Name', 'CAS Number', 
  'Amount', 'Units', 'Container Type', 'Storage Condition', 'Source']
    I can probably simultaneously check that they all exist and are not empty
  Then, if Source == 'Purchased':
    Ensure that these fields exist: ['Manufacturer', 'Lot/Batch Number', 
    'Internal Lot Number']
  Elif Source == 'Prepared':
    Ensure that these fields exist: ['Internal Lot Number', 'Components']
    Ensure that Components != []
  Else (meaning Source is not equal to 'Purchased' or 'Prepared'), fail validation
